/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VideoGeneratorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  // API 配置
  apiKey: "",
  apiHost: "https://grsai.dakka.com.cn",
  apiHosts: [
    {
      id: "default",
      name: "\u56FD\u5185\u76F4\u8FDE",
      url: "https://grsai.dakka.com.cn",
      enabled: true,
      description: "\u56FD\u5185\u670D\u52A1\u5668\uFF0C\u8BBF\u95EE\u901F\u5EA6\u5FEB"
    },
    {
      id: "overseas",
      name: "\u6D77\u5916\u670D\u52A1\u5668",
      url: "https://api.grsai.com",
      enabled: true,
      description: "\u6D77\u5916\u670D\u52A1\u5668\uFF0C\u7A33\u5B9A\u6027\u597D"
    }
  ],
  selectedApiHost: "default",
  // 视频生成默认参数
  defaultAspectRatio: "16:9",
  defaultDuration: 10,
  defaultSize: "small",
  defaultModel: "sora-2",
  // 高级配置
  useWebhook: false,
  webhookUrl: "",
  pollingInterval: 2e3,
  maxPollingAttempts: 150,
  // UI 配置
  showRibbonIcon: true,
  showStatusBar: true,
  modalWidth: "600px",
  modalHeight: "auto",
  // 视频质量选项
  availableAspectRatios: ["16:9", "9:16", "1:1", "4:3", "3:4"],
  availableDurations: [5, 10, 15, 30, 60],
  availableSizes: ["small", "medium", "large"],
  availableModels: ["sora-2", "sora-1.5", "runway-gen3"],
  // AI模型管理
  modelConfigs: [
    {
      id: "sora-2",
      name: "Sora 2.0",
      value: "sora-2",
      enabled: true,
      description: "OpenAI\u6700\u65B0\u89C6\u9891\u751F\u6210\u6A21\u578B",
      isCustom: false
    },
    {
      id: "sora-1.5",
      name: "Sora 1.5",
      value: "sora-1.5",
      enabled: true,
      description: "OpenAI\u89C6\u9891\u751F\u6210\u6A21\u578B",
      isCustom: false
    },
    {
      id: "runway-gen3",
      name: "Runway Gen-3",
      value: "runway-gen3",
      enabled: true,
      description: "Runway\u516C\u53F8\u89C6\u9891\u751F\u6210\u6A21\u578B",
      isCustom: false
    }
  ]
};
var VideoGeneratorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView("video-generator-view", (leaf) => new VideoGeneratorView(leaf, this));
    if (this.settings.showRibbonIcon) {
      const ribbonIconEl = this.addRibbonIcon("video", "AI Video Generator", (evt) => {
        this.openVideoGeneratorSidebar();
      });
      ribbonIconEl.addClass("video-generator-ribbon-class");
    }
    if (this.settings.showStatusBar) {
      const statusBarItemEl = this.addStatusBarItem();
      statusBarItemEl.setText("AI Video Generator");
    }
    this.addCommand({
      id: "open-video-generator",
      name: "Generate AI Video",
      callback: () => {
        this.openVideoGeneratorSidebar();
      }
    });
    this.addCommand({
      id: "generate-video-from-selection",
      name: "Generate video from selected text",
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        if (selection.trim()) {
          this.openVideoGeneratorSidebar(selection);
        } else {
          new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u751F\u6210\u89C6\u9891\u7684\u6587\u672C");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const selection = editor.getSelection();
        if (selection.trim()) {
          menu.addItem((item) => {
            item.setTitle("\u{1F3AC} \u4F7F\u7528Sora\u751F\u6210\u89C6\u9891").setIcon("video").onClick(async () => {
              await this.generateVideoFromSelection(selection, editor);
            });
          });
        }
      })
    );
    this.addSettingTab(new VideoGeneratorSettingTab(this.app, this));
  }
  // 打开视频生成侧边栏
  async openVideoGeneratorSidebar(initialPrompt = "") {
    const existingLeaf = this.app.workspace.getLeavesOfType("video-generator-view")[0];
    if (existingLeaf) {
      this.app.workspace.revealLeaf(existingLeaf);
      const view = existingLeaf.view;
      view.initialPrompt = initialPrompt;
      await view.onOpen();
    } else {
      const leaf = this.app.workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: "video-generator-view", active: true });
        const view = leaf.view;
        view.initialPrompt = initialPrompt;
        await view.onOpen();
      }
    }
  }
  // 从选中文本生成视频并下载
  async generateVideoFromSelection(selection, editor) {
    var _a, _b, _c;
    if (!this.settings.apiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EAPI\u5BC6\u94A5");
      return;
    }
    new import_obsidian.Notice("\u5F00\u59CB\u751F\u6210\u89C6\u9891\uFF0C\u8BF7\u7A0D\u5019...");
    try {
      const request = {
        model: this.settings.defaultModel,
        prompt: selection.trim(),
        aspectRatio: this.settings.defaultAspectRatio,
        duration: this.settings.defaultDuration,
        size: this.settings.defaultSize,
        shutProgress: false
      };
      const response = await this.generateVideo(request);
      console.log("API Response:", response);
      let taskId = null;
      if (response && typeof response === "object") {
        const resp = response;
        if (resp.id) {
          taskId = resp.id;
        } else if (resp.data && resp.data.id) {
          taskId = resp.data.id;
        } else if (resp.task_id) {
          taskId = resp.task_id;
        } else if (resp.data && resp.data.task_id) {
          taskId = resp.data.task_id;
        } else if (resp.data && resp.data.taskId) {
          taskId = resp.data.taskId;
        }
        console.log("Command API Response structure:", {
          hasId: !!resp.id,
          hasData: !!resp.data,
          dataId: (_a = resp.data) == null ? void 0 : _a.id,
          dataTaskId: (_b = resp.data) == null ? void 0 : _b.taskId,
          dataTask_id: (_c = resp.data) == null ? void 0 : _c.task_id,
          fullResponse: resp
        });
      }
      if (taskId) {
        await this.pollAndDownloadVideo(taskId, selection, editor);
      } else {
        console.error("Unexpected API response format:", response);
        const resp = response;
        let errorDetails = "";
        if (resp.data) {
          errorDetails = `
Data\u5185\u5BB9: ${JSON.stringify(resp.data)}`;
        }
        if (resp.msg) {
          errorDetails += `
\u6D88\u606F: ${resp.msg}`;
        }
        if (resp.code !== void 0) {
          errorDetails += `
\u4EE3\u7801: ${resp.code}`;
        }
        throw new Error(`\u672A\u83B7\u53D6\u5230\u4EFB\u52A1ID\u3002API\u54CD\u5E94: ${JSON.stringify(response)}${errorDetails}`);
      }
    } catch (error) {
      console.error("Video generation error:", error);
      const friendlyMessage = this.handleApiError(error);
      new import_obsidian.Notice(`\u751F\u6210\u5931\u8D25: ${friendlyMessage}`);
    }
  }
  // 轮询视频生成结果并下载
  async pollAndDownloadVideo(id, originalText, editor) {
    let pollCount = 0;
    const maxAttempts = this.settings.maxPollingAttempts;
    const pollInterval = setInterval(async () => {
      pollCount++;
      if (pollCount > maxAttempts) {
        clearInterval(pollInterval);
        new import_obsidian.Notice("\u8F6E\u8BE2\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u624B\u52A8\u68C0\u67E5\u7ED3\u679C");
        return;
      }
      try {
        const result = await this.getVideoResult(id);
        console.log("Video generation result (context menu):", result);
        const progress = result.progress || 0;
        new import_obsidian.Notice(`\u751F\u6210\u8FDB\u5EA6: ${progress}% (${pollCount}/${maxAttempts})`);
        const status = result.status || result.state || result.task_status;
        console.log("Video generation status (context menu):", status, "progress:", progress);
        if (status === "succeeded" || status === "completed" || status === "success" || progress === 100) {
          clearInterval(pollInterval);
          await this.handleVideoSuccess(result, originalText, editor);
          new import_obsidian.Notice("\u89C6\u9891\u751F\u6210\u6210\u529F\uFF01");
        } else if (status === "failed" || status === "error") {
          clearInterval(pollInterval);
          const errorMsg = result.failure_reason || result.error || result.message || "\u672A\u77E5\u9519\u8BEF";
          new import_obsidian.Notice(`\u751F\u6210\u5931\u8D25: ${errorMsg}`);
        }
      } catch (error) {
        console.error("Polling error:", error);
        clearInterval(pollInterval);
        const friendlyMessage = this.handleApiError(error);
        new import_obsidian.Notice(`\u83B7\u53D6\u7ED3\u679C\u5931\u8D25: ${friendlyMessage}`);
      }
    }, this.settings.pollingInterval);
  }
  // 处理视频生成成功
  async handleVideoSuccess(result, originalText, editor) {
    let videoUrl = null;
    if (result.results && result.results.length > 0) {
      videoUrl = result.results[0].url;
    } else if (result.video_url) {
      videoUrl = result.video_url;
    } else if (result.url) {
      videoUrl = result.url;
    } else if (result.data && result.data.url) {
      videoUrl = result.data.url;
    }
    if (videoUrl) {
      const localPath = await this.downloadVideo(videoUrl, originalText);
      const fileName = localPath.split("/").pop() || localPath;
      const videoMarkdown = `

![[${fileName}]]

`;
      editor.replaceSelection(videoMarkdown);
      new import_obsidian.Notice("\u89C6\u9891\u5DF2\u4E0B\u8F7D\u5E76\u63D2\u5165\u5230\u7B14\u8BB0\u4E2D");
    } else {
      console.error("\u672A\u627E\u5230\u89C6\u9891URL\uFF0CAPI\u54CD\u5E94\u7ED3\u6784:", result);
      new import_obsidian.Notice("\u89C6\u9891\u751F\u6210\u6210\u529F\uFF0C\u4F46\u672A\u627E\u5230\u89C6\u9891URL\uFF0C\u8BF7\u68C0\u67E5API\u54CD\u5E94\u7ED3\u6784");
    }
  }
  // 下载视频到本地
  async downloadVideo(videoUrl, originalText) {
    var _a;
    try {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        throw new Error("\u6CA1\u6709\u627E\u5230\u5F53\u524D\u6D3B\u52A8\u6587\u4EF6");
      }
      const currentDir = ((_a = activeFile.parent) == null ? void 0 : _a.path) || "";
      const fileName = `sora-video-${originalText.substring(0, 20).replace(/[^\w\s]/gi, "").replace(/\s+/g, "-")}-${Date.now()}.mp4`;
      const aivideoFolder = currentDir ? `${currentDir}/aivideo` : "aivideo";
      const folderPath = `${aivideoFolder}/${fileName}`;
      const folderExists = await this.app.vault.adapter.exists(aivideoFolder);
      if (!folderExists) {
        await this.app.vault.createFolder(aivideoFolder);
      }
      const response = await fetch(videoUrl);
      if (!response.ok) {
        throw new Error(`\u4E0B\u8F7D\u5931\u8D25: ${response.status} ${response.statusText}`);
      }
      const arrayBuffer = await response.arrayBuffer();
      await this.app.vault.adapter.writeBinary(folderPath, arrayBuffer);
      new import_obsidian.Notice(`\u89C6\u9891\u5DF2\u4E0B\u8F7D\u5230: ${folderPath}`);
      return folderPath;
    } catch (error) {
      console.error("Download error:", error);
      new import_obsidian.Notice("\u89C6\u9891\u4E0B\u8F7D\u5931\u8D25\uFF0C\u4F46\u94FE\u63A5\u5DF2\u63D2\u5165\u5230\u7B14\u8BB0\u4E2D");
      throw error;
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // 获取当前选中的API主机
  getCurrentApiHost() {
    const selectedHost = this.settings.apiHosts.find((host) => host.id === this.settings.selectedApiHost);
    if (selectedHost && selectedHost.enabled) {
      return selectedHost.url;
    }
    if (!this.settings.apiHost) {
      throw new Error("API\u4E3B\u673A\u5730\u5740\u672A\u914D\u7F6E");
    }
    return this.settings.apiHost;
  }
  // 处理API错误，提供用户友好的错误信息
  handleApiError(error) {
    const errorMessage = error.message || error.toString();
    if (errorMessage.includes("insufficient credits") || errorMessage.includes("\u4F59\u989D\u4E0D\u8DB3")) {
      return "\u8D26\u6237\u4F59\u989D\u4E0D\u8DB3\uFF0C\u8BF7\u5145\u503C\u540E\u91CD\u8BD5";
    }
    if (errorMessage.includes("API\u5BC6\u94A5") || errorMessage.includes("unauthorized") || errorMessage.includes("401")) {
      return "API\u5BC6\u94A5\u914D\u7F6E\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u8BBE\u7F6E\u4E2D\u7684API\u5BC6\u94A5\u662F\u5426\u6B63\u786E";
    }
    if (errorMessage.includes("API\u4E3B\u673A") || errorMessage.includes("host") || errorMessage.includes("404")) {
      return "API\u4E3B\u673A\u914D\u7F6E\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u8BBE\u7F6E\u4E2D\u7684API\u4E3B\u673A\u5730\u5740";
    }
    if (errorMessage.includes("HTTP error") || errorMessage.includes("network") || errorMessage.includes("timeout")) {
      return "\u7F51\u7EDC\u8FDE\u63A5\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u6216\u7A0D\u540E\u91CD\u8BD5";
    }
    if (errorMessage.includes("API\u9519\u8BEF")) {
      return errorMessage.replace("API\u9519\u8BEF: ", "").replace("API\u9519\u8BEF (", "").replace(/\): /, ": ");
    }
    return errorMessage;
  }
  // API调用方法
  async generateVideo(request) {
    if (!this.settings.apiKey) {
      throw new Error("API\u5BC6\u94A5\u672A\u914D\u7F6E\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EAPI\u5BC6\u94A5");
    }
    const currentHost = this.getCurrentApiHost();
    if (!currentHost) {
      throw new Error("API\u4E3B\u673A\u5730\u5740\u672A\u914D\u7F6E");
    }
    const url = `${currentHost}/v1/video/sora-video`;
    console.log("Making API request to:", url);
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.settings.apiKey}`
    };
    if (!request.model) {
      request.model = this.settings.defaultModel;
    }
    if (request.imageUrl && request.imageUrl.trim()) {
      request.url = request.imageUrl.trim();
    }
    if (request.imageUrl === void 0) {
      delete request.imageUrl;
    }
    if (this.settings.useWebhook && this.settings.webhookUrl) {
      request.webHook = this.settings.webhookUrl;
    } else {
      request.webHook = "-1";
    }
    const cleanRequest = Object.fromEntries(
      Object.entries(request).filter(([_, value]) => value !== void 0)
    );
    console.log("Sending request:", cleanRequest);
    try {
      const response = await fetch(url, {
        method: "POST",
        headers,
        body: JSON.stringify(cleanRequest)
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      const data = await response.json();
      console.log("Raw API response:", data);
      if (data && typeof data === "object") {
        if (data.code !== void 0 && data.code !== 0 && data.code !== 200) {
          const errorMsg = data.msg || data.message || "\u672A\u77E5\u9519\u8BEF";
          throw new Error(`API\u9519\u8BEF (${data.code}): ${errorMsg}`);
        }
        if (data.error) {
          throw new Error(`API\u9519\u8BEF: ${data.error}`);
        }
      }
      return data;
    } catch (error) {
      console.error("Video generation error:", error);
      throw error;
    }
  }
  // 获取视频生成结果
  async getVideoResult(id) {
    const currentHost = this.getCurrentApiHost();
    if (!currentHost) {
      throw new Error("API\u4E3B\u673A\u5730\u5740\u672A\u914D\u7F6E");
    }
    const url = `${currentHost}/v1/draw/result`;
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.settings.apiKey}`
    };
    try {
      const response = await fetch(url, {
        method: "POST",
        headers,
        body: JSON.stringify({ id })
      });
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      const data = await response.json();
      if (data && typeof data === "object") {
        if (data.code !== void 0 && data.code !== 0 && data.code !== 200) {
          const errorMsg = data.msg || data.message || "\u672A\u77E5\u9519\u8BEF";
          throw new Error(`API\u9519\u8BEF (${data.code}): ${errorMsg}`);
        }
        if (data.error) {
          throw new Error(`API\u9519\u8BEF: ${data.error}`);
        }
      }
      return data.data || data;
    } catch (error) {
      console.error("Get video result error:", error);
      throw error;
    }
  }
};
var VideoGeneratorView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin, initialPrompt = "") {
    super(leaf);
    this.plugin = plugin;
    this.initialPrompt = initialPrompt;
  }
  getViewType() {
    return "video-generator-view";
  }
  getDisplayText() {
    return "AI Video Generator";
  }
  getIcon() {
    return "video";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("video-generator-sidebar");
    const headerEl = containerEl.createDiv("video-generator-header");
    headerEl.createEl("h2", { text: "AI Video Generator" });
    if (!this.plugin.settings.apiKey) {
      const errorEl = containerEl.createDiv("video-generator-error");
      errorEl.createEl("p", { text: "\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EAPI\u5BC6\u94A5" });
      const settingsBtn = errorEl.createEl("button", { text: "\u6253\u5F00\u8BBE\u7F6E" });
      settingsBtn.addClass("video-generator-button");
      settingsBtn.onclick = () => {
        this.app.setting.open();
        this.app.setting.openTabById(this.plugin.manifest.id);
      };
      return;
    }
    const promptContainer = containerEl.createDiv("video-generator-prompt-container");
    const promptLabel = promptContainer.createEl("label", { text: "\u89C6\u9891\u63CF\u8FF0 (Prompt):" });
    const promptInput = promptContainer.createEl("textarea", {
      placeholder: "\u63CF\u8FF0\u60A8\u60F3\u8981\u751F\u6210\u7684\u89C6\u9891\u5185\u5BB9...",
      value: this.initialPrompt
    });
    promptInput.setAttr("rows", "3");
    const imageContainer = containerEl.createDiv("video-generator-image-container");
    const imageLabel = imageContainer.createEl("label", { text: "\u53C2\u8003\u56FE\u7247URL (\u53EF\u9009):" });
    const imageInput = imageContainer.createEl("input", {
      type: "text",
      placeholder: "https://example.com/image.jpg"
    });
    const paramsContainer = containerEl.createDiv("video-generator-params-container");
    const modelContainer = paramsContainer.createDiv("video-generator-param");
    const modelLabel = modelContainer.createEl("label", { text: "AI\u6A21\u578B:" });
    const modelSelect = modelContainer.createEl("select");
    const enabledModels = this.plugin.settings.modelConfigs.filter((model) => model.enabled);
    for (const model of enabledModels) {
      const option = modelSelect.createEl("option", { value: model.value, text: model.name });
      if (model.value === this.plugin.settings.defaultModel) {
        option.selected = true;
      }
    }
    const aspectRatioContainer = paramsContainer.createDiv("video-generator-param");
    const aspectRatioLabel = aspectRatioContainer.createEl("label", { text: "\u89C6\u9891\u6BD4\u4F8B:" });
    const aspectRatioSelect = aspectRatioContainer.createEl("select");
    for (const ratio of this.plugin.settings.availableAspectRatios) {
      const option = aspectRatioSelect.createEl("option", {
        value: ratio,
        text: `${ratio} ${this.getAspectRatioDescription(ratio)}`
      });
      if (ratio === this.plugin.settings.defaultAspectRatio) {
        option.selected = true;
      }
    }
    const durationContainer = paramsContainer.createDiv("video-generator-param");
    const durationLabel = durationContainer.createEl("label", { text: "\u89C6\u9891\u65F6\u957F:" });
    const durationSelect = durationContainer.createEl("select");
    for (const duration of this.plugin.settings.availableDurations) {
      const option = durationSelect.createEl("option", {
        value: duration.toString(),
        text: `${duration}\u79D2`
      });
      if (duration === this.plugin.settings.defaultDuration) {
        option.selected = true;
      }
    }
    const sizeContainer = paramsContainer.createDiv("video-generator-param");
    const sizeLabel = sizeContainer.createEl("label", { text: "\u89C6\u9891\u5C3A\u5BF8:" });
    const sizeSelect = sizeContainer.createEl("select");
    for (const size of this.plugin.settings.availableSizes) {
      const option = sizeSelect.createEl("option", {
        value: size,
        text: `${size} ${this.getSizeDescription(size)}`
      });
      if (size === this.plugin.settings.defaultSize) {
        option.selected = true;
      }
    }
    const buttonContainer = containerEl.createDiv("video-generator-button-container");
    const generateButton = buttonContainer.createEl("button", { text: "\u751F\u6210\u89C6\u9891" });
    generateButton.addClass("video-generator-button");
    const progressContainer = containerEl.createDiv("video-generator-progress-container");
    progressContainer.style.display = "none";
    const resultContainer = containerEl.createDiv("video-generator-result-container");
    resultContainer.style.display = "none";
    generateButton.onclick = async () => {
      var _a, _b, _c;
      const prompt = promptInput.value.trim();
      if (!prompt) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u89C6\u9891\u63CF\u8FF0");
        return;
      }
      const imageUrl = imageInput.value.trim();
      const model = modelSelect.value;
      const aspectRatio = aspectRatioSelect.value;
      const duration = parseInt(durationSelect.value);
      const size = sizeSelect.value;
      progressContainer.style.display = "block";
      progressContainer.innerHTML = '<div class="video-generator-progress">\u6B63\u5728\u751F\u6210\u89C6\u9891...</div>';
      resultContainer.style.display = "none";
      generateButton.disabled = true;
      generateButton.textContent = "\u751F\u6210\u4E2D...";
      try {
        const initialResponse = await this.plugin.generateVideo({
          prompt,
          imageUrl: imageUrl || void 0,
          model,
          aspectRatio,
          duration,
          size
        });
        const renderFromResult = (result) => {
          progressContainer.style.display = "none";
          resultContainer.style.display = "block";
          resultContainer.empty();
          let videoUrl = null;
          const possibleFields = [
            "video_url",
            "videoUrl",
            "url",
            "video",
            "output_url",
            "file_url",
            "videoUrl",
            "video_path",
            "download_url",
            "media_url"
          ];
          for (const field of possibleFields) {
            if (result[field] && typeof result[field] === "string" && result[field].startsWith("http")) {
              videoUrl = result[field];
              break;
            }
          }
          if (!videoUrl) {
            const nestedObjects = ["data", "result", "output", "file", "response"];
            for (const obj of nestedObjects) {
              if (result[obj] && typeof result[obj] === "object") {
                for (const field of possibleFields) {
                  if (result[obj][field] && typeof result[obj][field] === "string" && result[obj][field].startsWith("http")) {
                    videoUrl = result[obj][field];
                    break;
                  }
                }
                if (videoUrl)
                  break;
              }
            }
          }
          if (!videoUrl) {
            const arrayFields = ["results", "files", "videos", "data"];
            for (const field of arrayFields) {
              if (Array.isArray(result[field]) && result[field].length > 0) {
                const firstItem = result[field][0];
                if (firstItem && typeof firstItem === "object") {
                  for (const urlField of possibleFields) {
                    if (firstItem[urlField] && typeof firstItem[urlField] === "string" && firstItem[urlField].startsWith("http")) {
                      videoUrl = firstItem[urlField];
                      break;
                    }
                  }
                  if (videoUrl)
                    break;
                }
              }
            }
          }
          ;
          if (!videoUrl || videoUrl === "undefined" || videoUrl.trim() === "") {
            console.error("No valid video URL found in result:", result);
            throw new Error(`\u672A\u627E\u5230\u6709\u6548\u7684\u89C6\u9891URL\u3002\u7ED3\u679C\u5BF9\u8C61: ${JSON.stringify(result)}`);
          }
          const videoEl = resultContainer.createEl("video");
          videoEl.setAttribute("src", videoUrl);
          videoEl.setAttribute("controls", "true");
          const buttonRow = resultContainer.createDiv();
          buttonRow.style.marginTop = "10px";
          const downloadBtn = buttonRow.createEl("button", { text: "\u4E0B\u8F7D\u89C6\u9891" });
          downloadBtn.addClass("video-generator-download-button");
          downloadBtn.onclick = () => {
            const link = document.createElement("a");
            link.href = videoUrl;
            link.download = `video_${Date.now()}.mp4`;
            link.click();
          };
          const insertBtn = buttonRow.createEl("button", { text: "\u63D2\u5165\u5230\u7B14\u8BB0" });
          insertBtn.addClass("video-generator-insert-button");
          insertBtn.onclick = () => {
            let mdView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
            if (!mdView) {
              const mdLeaves = this.app.workspace.getLeavesOfType("markdown");
              if (mdLeaves && mdLeaves.length > 0) {
                mdView = mdLeaves[mdLeaves.length - 1].view;
              }
            }
            if (mdView) {
              const editor = mdView.editor;
              const cursor = editor.getCursor();
              editor.replaceRange(`![Generated Video](${videoUrl})`, cursor);
            } else {
              new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A\u7B14\u8BB0\u6587\u4EF6");
            }
          };
        };
        let taskId = null;
        const resp = initialResponse;
        if (resp == null ? void 0 : resp.id)
          taskId = resp.id;
        else if ((_a = resp == null ? void 0 : resp.data) == null ? void 0 : _a.id)
          taskId = resp.data.id;
        else if (resp == null ? void 0 : resp.task_id)
          taskId = resp.task_id;
        else if ((_b = resp == null ? void 0 : resp.data) == null ? void 0 : _b.task_id)
          taskId = resp.data.task_id;
        else if ((_c = resp == null ? void 0 : resp.data) == null ? void 0 : _c.taskId)
          taskId = resp.data.taskId;
        if (taskId) {
          let pollCount = 0;
          const maxAttempts = this.plugin.settings.maxPollingAttempts;
          const intervalId = setInterval(async () => {
            pollCount++;
            if (pollCount > maxAttempts) {
              clearInterval(intervalId);
              progressContainer.innerHTML = `<div class="video-generator-error">\u8F6E\u8BE2\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u624B\u52A8\u68C0\u67E5\u7ED3\u679C</div>`;
              generateButton.disabled = false;
              generateButton.textContent = "\u751F\u6210\u89C6\u9891";
              new import_obsidian.Notice("\u8F6E\u8BE2\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u624B\u52A8\u68C0\u67E5\u7ED3\u679C");
              return;
            }
            try {
              const result = await this.plugin.getVideoResult(taskId);
              const progress = result.progress || 0;
              const progressText = progress > 0 ? `\u751F\u6210\u8FDB\u5EA6: ${progress}%` : "\u6B63\u5728\u751F\u6210\u89C6\u9891...";
              progressContainer.innerHTML = `<div class="video-generator-progress">${progressText} (${pollCount}/${maxAttempts})</div>`;
              const status = result.status || result.state || result.task_status;
              if (status === "succeeded" || status === "completed" || status === "success" || progress === 100) {
                clearInterval(intervalId);
                generateButton.disabled = false;
                generateButton.textContent = "\u751F\u6210\u89C6\u9891";
                new import_obsidian.Notice("\u89C6\u9891\u751F\u6210\u6210\u529F\uFF01");
                renderFromResult(result);
              } else if (status === "failed" || status === "error") {
                clearInterval(intervalId);
                const errorMsg = result.failure_reason || result.error || result.message || "\u672A\u77E5\u9519\u8BEF";
                progressContainer.innerHTML = `<div class="video-generator-error">\u751F\u6210\u5931\u8D25: ${errorMsg}</div>`;
                generateButton.disabled = false;
                generateButton.textContent = "\u751F\u6210\u89C6\u9891";
                new import_obsidian.Notice(`\u751F\u6210\u5931\u8D25: ${errorMsg}`);
              }
            } catch (e) {
              console.error("Get video result error:", e);
            }
          }, 2e3);
        } else {
          renderFromResult(initialResponse);
        }
      } catch (error) {
        console.error("Video generation error:", error);
        progressContainer.style.display = "none";
        resultContainer.style.display = "block";
        resultContainer.empty();
        resultContainer.createEl("div", {
          text: `\u751F\u6210\u5931\u8D25: ${error.message}`,
          cls: "video-generator-error"
        });
        generateButton.disabled = false;
        generateButton.textContent = "\u751F\u6210\u89C6\u9891";
      }
    };
  }
  getAspectRatioDescription(ratio) {
    const descriptions = {
      "16:9": "(\u6A2A\u5C4F)",
      "9:16": "(\u7AD6\u5C4F)",
      "1:1": "(\u6B63\u65B9\u5F62)",
      "4:3": "(\u4F20\u7EDF)",
      "3:4": "(\u4F20\u7EDF\u7AD6\u5C4F)"
    };
    return descriptions[ratio] || ratio;
  }
  getSizeDescription(size) {
    const descriptions = {
      "small": "(\u5C0F\u5C3A\u5BF8)",
      "medium": "(\u4E2D\u5C3A\u5BF8)",
      "large": "(\u5927\u5C3A\u5BF8)",
      "hd": "(\u9AD8\u6E05)",
      "4k": "(4K)"
    };
    return descriptions[size] || size;
  }
  async onClose() {
    const { containerEl } = this;
    containerEl.empty();
  }
};
var VideoGeneratorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "AI Video Generator \u8BBE\u7F6E" });
    containerEl.createEl("h3", { text: "API \u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API\u5BC6\u94A5").setDesc("\u8BF7\u8F93\u5165\u60A8\u7684API\u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8F93\u5165API\u5BC6\u94A5").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u9009\u62E9API\u4E3B\u673A").setDesc("\u9009\u62E9\u5F53\u524D\u4F7F\u7528\u7684API\u670D\u52A1\u5668").addDropdown((dropdown) => {
      for (const host of this.plugin.settings.apiHosts) {
        if (host.enabled) {
          dropdown.addOption(host.id, `${host.name} (${host.url})`);
        }
      }
      dropdown.setValue(this.plugin.settings.selectedApiHost).onChange(async (value) => {
        this.plugin.settings.selectedApiHost = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "API\u4E3B\u673A\u7BA1\u7406" });
    for (const host of this.plugin.settings.apiHosts) {
      const hostContainer = containerEl.createDiv("api-host-item");
      hostContainer.style.border = "1px solid var(--background-modifier-border)";
      hostContainer.style.padding = "10px";
      hostContainer.style.margin = "5px 0";
      hostContainer.style.borderRadius = "4px";
      const headerDiv = hostContainer.createDiv();
      headerDiv.style.display = "flex";
      headerDiv.style.justifyContent = "space-between";
      headerDiv.style.alignItems = "center";
      headerDiv.style.marginBottom = "5px";
      const nameSpan = headerDiv.createSpan();
      nameSpan.textContent = host.name;
      nameSpan.style.fontWeight = "bold";
      const statusSpan = headerDiv.createSpan();
      statusSpan.textContent = host.enabled ? "\u2705 \u542F\u7528" : "\u274C \u7981\u7528";
      statusSpan.style.color = host.enabled ? "var(--text-accent)" : "var(--text-muted)";
      const urlDiv = hostContainer.createDiv();
      urlDiv.textContent = `URL: ${host.url}`;
      urlDiv.style.fontSize = "0.9em";
      urlDiv.style.color = "var(--text-muted)";
      urlDiv.style.marginBottom = "5px";
      if (host.description) {
        const descDiv = hostContainer.createDiv();
        descDiv.textContent = host.description;
        descDiv.style.fontSize = "0.8em";
        descDiv.style.color = "var(--text-muted)";
        descDiv.style.marginBottom = "5px";
      }
      const buttonDiv = hostContainer.createDiv();
      buttonDiv.style.display = "flex";
      buttonDiv.style.gap = "5px";
      const toggleButton = buttonDiv.createEl("button", { text: host.enabled ? "\u7981\u7528" : "\u542F\u7528" });
      toggleButton.style.fontSize = "0.8em";
      toggleButton.onclick = async () => {
        host.enabled = !host.enabled;
        await this.plugin.saveSettings();
        this.display();
      };
      const testButton = buttonDiv.createEl("button", { text: "\u6D4B\u8BD5\u8FDE\u63A5" });
      testButton.style.fontSize = "0.8em";
      testButton.onclick = async () => {
        await this.testApiHost(host);
      };
      if (host.id !== "default" && host.id !== "overseas") {
        const deleteButton = buttonDiv.createEl("button", { text: "\u5220\u9664" });
        deleteButton.style.fontSize = "0.8em";
        deleteButton.style.color = "var(--text-error)";
        deleteButton.onclick = async () => {
          if (confirm(`\u786E\u5B9A\u8981\u5220\u9664\u4E3B\u673A "${host.name}" \u5417\uFF1F`)) {
            this.plugin.settings.apiHosts = this.plugin.settings.apiHosts.filter((h) => h.id !== host.id);
            if (this.plugin.settings.selectedApiHost === host.id) {
              this.plugin.settings.selectedApiHost = "default";
            }
            await this.plugin.saveSettings();
            this.display();
          }
        };
      }
    }
    const addHostButton = containerEl.createEl("button", { text: "\u2795 \u6DFB\u52A0\u65B0API\u4E3B\u673A" });
    addHostButton.style.marginTop = "10px";
    addHostButton.onclick = () => {
      this.showAddHostModal();
    };
    containerEl.createEl("h3", { text: "\u9ED8\u8BA4\u53C2\u6570" });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4AI\u6A21\u578B").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u4F7F\u7528\u7684AI\u6A21\u578B").addDropdown((dropdown) => {
      const enabledModels = this.plugin.settings.modelConfigs.filter((model) => model.enabled);
      for (const model of enabledModels) {
        dropdown.addOption(model.value, model.name);
      }
      dropdown.setValue(this.plugin.settings.defaultModel).onChange(async (value) => {
        this.plugin.settings.defaultModel = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u9891\u6BD4\u4F8B").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u89C6\u9891\u6BD4\u4F8B").addDropdown((dropdown) => {
      for (const ratio of this.plugin.settings.availableAspectRatios) {
        dropdown.addOption(ratio, `${ratio} ${this.getAspectRatioDescription(ratio)}`);
      }
      dropdown.setValue(this.plugin.settings.defaultAspectRatio).onChange(async (value) => {
        this.plugin.settings.defaultAspectRatio = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u9891\u65F6\u957F").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u89C6\u9891\u65F6\u957F").addDropdown((dropdown) => {
      for (const duration of this.plugin.settings.availableDurations) {
        dropdown.addOption(duration.toString(), `${duration}\u79D2`);
      }
      dropdown.setValue(this.plugin.settings.defaultDuration.toString()).onChange(async (value) => {
        this.plugin.settings.defaultDuration = parseInt(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u9891\u6E05\u6670\u5EA6").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u89C6\u9891\u6E05\u6670\u5EA6").addDropdown((dropdown) => {
      for (const size of this.plugin.settings.availableSizes) {
        dropdown.addOption(size, `${this.getSizeDescription(size)} (${size})`);
      }
      dropdown.setValue(this.plugin.settings.defaultSize).onChange(async (value) => {
        this.plugin.settings.defaultSize = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "AI\u6A21\u578B\u7BA1\u7406" });
    for (const model of this.plugin.settings.modelConfigs) {
      const modelCard = containerEl.createDiv("model-card");
      modelCard.style.border = "1px solid var(--background-modifier-border)";
      modelCard.style.borderRadius = "6px";
      modelCard.style.padding = "12px";
      modelCard.style.marginBottom = "8px";
      modelCard.style.backgroundColor = "var(--background-secondary)";
      const modelInfo = modelCard.createDiv("model-info");
      modelInfo.style.display = "flex";
      modelInfo.style.justifyContent = "space-between";
      modelInfo.style.alignItems = "center";
      const modelDetails = modelInfo.createDiv("model-details");
      modelDetails.style.flex = "1";
      const modelName = modelDetails.createEl("div", { text: model.name });
      modelName.style.fontWeight = "bold";
      modelName.style.fontSize = "0.9em";
      const modelValue = modelDetails.createEl("div", { text: `\u503C: ${model.value}` });
      modelValue.style.fontSize = "0.8em";
      modelValue.style.color = "var(--text-muted)";
      if (model.description) {
        const modelDesc = modelDetails.createEl("div", { text: model.description });
        modelDesc.style.fontSize = "0.8em";
        modelDesc.style.color = "var(--text-muted)";
        modelDesc.style.marginTop = "2px";
      }
      const buttonDiv = modelInfo.createDiv("model-actions");
      buttonDiv.style.display = "flex";
      buttonDiv.style.gap = "8px";
      const toggleButton = buttonDiv.createEl("button", {
        text: model.enabled ? "\u7981\u7528" : "\u542F\u7528"
      });
      toggleButton.style.fontSize = "0.8em";
      toggleButton.style.color = model.enabled ? "var(--text-error)" : "var(--text-accent)";
      toggleButton.onclick = async () => {
        model.enabled = !model.enabled;
        await this.plugin.saveSettings();
        this.display();
      };
      if (model.isCustom) {
        const editButton = buttonDiv.createEl("button", { text: "\u7F16\u8F91" });
        editButton.style.fontSize = "0.8em";
        editButton.onclick = () => {
          this.showEditModelModal(model);
        };
        const deleteButton = buttonDiv.createEl("button", { text: "\u5220\u9664" });
        deleteButton.style.fontSize = "0.8em";
        deleteButton.style.color = "var(--text-error)";
        deleteButton.onclick = async () => {
          if (confirm(`\u786E\u5B9A\u8981\u5220\u9664\u6A21\u578B "${model.name}" \u5417\uFF1F`)) {
            this.plugin.settings.modelConfigs = this.plugin.settings.modelConfigs.filter((m) => m.id !== model.id);
            if (this.plugin.settings.defaultModel === model.value) {
              const firstEnabled = this.plugin.settings.modelConfigs.find((m) => m.enabled);
              if (firstEnabled) {
                this.plugin.settings.defaultModel = firstEnabled.value;
              }
            }
            await this.plugin.saveSettings();
            this.display();
          }
        };
      }
    }
    const addModelButton = containerEl.createEl("button", { text: "\u2795 \u6DFB\u52A0\u65B0AI\u6A21\u578B" });
    addModelButton.style.marginTop = "10px";
    addModelButton.onclick = () => {
      this.showAddModelModal();
    };
    containerEl.createEl("h3", { text: "\u9AD8\u7EA7\u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u4F7F\u7528Webhook\u56DE\u8C03").setDesc("\u542F\u7528\u540E\u4F7F\u7528webhook\u63A5\u6536\u751F\u6210\u7ED3\u679C\uFF0C\u5426\u5219\u4F7F\u7528\u8F6E\u8BE2\u65B9\u5F0F").addToggle((toggle) => toggle.setValue(this.plugin.settings.useWebhook).onChange(async (value) => {
      this.plugin.settings.useWebhook = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.useWebhook) {
      new import_obsidian.Setting(containerEl).setName("Webhook URL").setDesc("\u63A5\u6536\u751F\u6210\u7ED3\u679C\u7684\u56DE\u8C03\u5730\u5740").addText((text) => text.setPlaceholder("https://your-webhook-url.com/callback").setValue(this.plugin.settings.webhookUrl).onChange(async (value) => {
        this.plugin.settings.webhookUrl = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("\u8F6E\u8BE2\u95F4\u9694 (\u6BEB\u79D2)").setDesc("\u8BBE\u7F6E\u8F6E\u8BE2\u751F\u6210\u7ED3\u679C\u7684\u95F4\u9694\u65F6\u95F4").addText((text) => text.setPlaceholder("2000").setValue(this.plugin.settings.pollingInterval.toString()).onChange(async (value) => {
      const interval = parseInt(value) || 2e3;
      this.plugin.settings.pollingInterval = Math.max(1e3, interval);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6700\u5927\u8F6E\u8BE2\u6B21\u6570").setDesc("\u8BBE\u7F6E\u8F6E\u8BE2\u7684\u6700\u5927\u5C1D\u8BD5\u6B21\u6570").addText((text) => text.setPlaceholder("150").setValue(this.plugin.settings.maxPollingAttempts.toString()).onChange(async (value) => {
      const attempts = parseInt(value) || 150;
      this.plugin.settings.maxPollingAttempts = Math.max(10, attempts);
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u754C\u9762\u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u529F\u80FD\u533A\u56FE\u6807").setDesc("\u5728\u5DE6\u4FA7\u529F\u80FD\u533A\u663E\u793A\u89C6\u9891\u751F\u6210\u56FE\u6807").addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange(async (value) => {
      this.plugin.settings.showRibbonIcon = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u72B6\u6001\u680F").setDesc("\u5728\u72B6\u6001\u680F\u663E\u793A\u63D2\u4EF6\u4FE1\u606F").addToggle((toggle) => toggle.setValue(this.plugin.settings.showStatusBar).onChange(async (value) => {
      this.plugin.settings.showStatusBar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u6001\u6846\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u751F\u6210\u89C6\u9891\u5BF9\u8BDD\u6846\u7684\u5BBD\u5EA6").addText((text) => text.setPlaceholder("600px").setValue(this.plugin.settings.modalWidth).onChange(async (value) => {
      this.plugin.settings.modalWidth = value || "600px";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u6001\u6846\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u751F\u6210\u89C6\u9891\u5BF9\u8BDD\u6846\u7684\u9AD8\u5EA6").addText((text) => text.setPlaceholder("auto").setValue(this.plugin.settings.modalHeight).onChange(async (value) => {
      this.plugin.settings.modalHeight = value || "auto";
      await this.plugin.saveSettings();
    }));
  }
  // 获取比例描述
  getAspectRatioDescription(ratio) {
    const descriptions = {
      "16:9": "(\u6A2A\u5C4F)",
      "9:16": "(\u7AD6\u5C4F)",
      "1:1": "(\u6B63\u65B9\u5F62)",
      "4:3": "(\u4F20\u7EDF)",
      "3:4": "(\u7AD6\u5C4F\u4F20\u7EDF)"
    };
    return descriptions[ratio] || "";
  }
  // 获取尺寸描述
  getSizeDescription(size) {
    const descriptions = {
      "small": "\u6807\u51C6",
      "medium": "\u4E2D\u7B49",
      "large": "\u9AD8\u6E05"
    };
    return descriptions[size] || size;
  }
  // 测试API主机连接
  async testApiHost(host) {
    if (!this.plugin.settings.apiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u914D\u7F6EAPI\u5BC6\u94A5");
      return;
    }
    try {
      new import_obsidian.Notice(`\u6B63\u5728\u6D4B\u8BD5\u8FDE\u63A5 ${host.name}...`);
      const testUrl = `${host.url}/v1/video/sora-video`;
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.plugin.settings.apiKey}`
      };
      const response = await fetch(testUrl, {
        method: "POST",
        headers,
        body: JSON.stringify({
          model: "sora-2",
          prompt: "test",
          aspect_ratio: "16:9",
          duration: 5,
          size: "small",
          webHook: "-1"
        })
      });
      if (response.ok) {
        new import_obsidian.Notice(`\u2705 ${host.name} \u8FDE\u63A5\u6210\u529F\uFF01`);
      } else {
        const errorText = await response.text();
        new import_obsidian.Notice(`\u274C ${host.name} \u8FDE\u63A5\u5931\u8D25: ${response.status} - ${errorText}`);
      }
    } catch (error) {
      new import_obsidian.Notice(`\u274C ${host.name} \u8FDE\u63A5\u5931\u8D25: ${error.message}`);
    }
  }
  // 显示添加新主机的模态框
  showAddHostModal() {
    const modal = new AddApiHostModal(this.app, this.plugin, (newHost) => {
      this.plugin.settings.apiHosts.push(newHost);
      this.plugin.saveSettings();
      this.display();
    });
    modal.open();
  }
  // 显示添加模型模态框
  showAddModelModal() {
    const modal = new AddModelModal(this.app, this.plugin, (newModel) => {
      this.plugin.settings.modelConfigs.push(newModel);
      this.plugin.saveSettings();
      this.display();
    });
    modal.open();
  }
  // 显示编辑模型模态框
  showEditModelModal(model) {
    const modal = new EditModelModal(this.app, this.plugin, model, (updatedModel) => {
      const index = this.plugin.settings.modelConfigs.findIndex((m) => m.id === model.id);
      if (index !== -1) {
        this.plugin.settings.modelConfigs[index] = updatedModel;
        this.plugin.saveSettings();
        this.display();
      }
    });
    modal.open();
  }
};
var AddApiHostModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u6DFB\u52A0\u65B0API\u4E3B\u673A" });
    const nameDiv = contentEl.createDiv();
    nameDiv.createEl("label", { text: "\u4E3B\u673A\u540D\u79F0" });
    const nameInput = nameDiv.createEl("input", { type: "text", placeholder: "\u4F8B\u5982\uFF1A\u5907\u7528\u670D\u52A1\u5668" });
    nameInput.style.width = "100%";
    nameInput.style.marginBottom = "10px";
    const urlDiv = contentEl.createDiv();
    urlDiv.createEl("label", { text: "\u4E3B\u673AURL" });
    const urlInput = urlDiv.createEl("input", { type: "text", placeholder: "https://api.example.com" });
    urlInput.style.width = "100%";
    urlInput.style.marginBottom = "10px";
    const descDiv = contentEl.createDiv();
    descDiv.createEl("label", { text: "\u63CF\u8FF0\uFF08\u53EF\u9009\uFF09" });
    const descInput = descDiv.createEl("input", { type: "text", placeholder: "\u4F8B\u5982\uFF1A\u5907\u7528\u670D\u52A1\u5668\uFF0C\u7A33\u5B9A\u6027\u597D" });
    descInput.style.width = "100%";
    descInput.style.marginBottom = "20px";
    const buttonDiv = contentEl.createDiv();
    buttonDiv.style.display = "flex";
    buttonDiv.style.gap = "10px";
    buttonDiv.style.justifyContent = "flex-end";
    const cancelButton = buttonDiv.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.onclick = () => this.close();
    const addButton = buttonDiv.createEl("button", { text: "\u6DFB\u52A0" });
    addButton.style.backgroundColor = "var(--interactive-accent)";
    addButton.style.color = "var(--text-on-accent)";
    addButton.onclick = () => {
      const name = nameInput.value.trim();
      const url = urlInput.value.trim();
      const description = descInput.value.trim();
      if (!name || !url) {
        new import_obsidian.Notice("\u8BF7\u586B\u5199\u4E3B\u673A\u540D\u79F0\u548CURL");
        return;
      }
      try {
        new URL(url);
      } catch (e) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u6709\u6548\u7684URL\u683C\u5F0F");
        return;
      }
      if (this.plugin.settings.apiHosts.some((host) => host.url === url)) {
        new import_obsidian.Notice("\u8BE5URL\u5DF2\u5B58\u5728");
        return;
      }
      const newHost = {
        id: `custom_${Date.now()}`,
        name,
        url,
        enabled: true,
        description: description || void 0
      };
      this.onSubmit(newHost);
      this.close();
      new import_obsidian.Notice(`\u5DF2\u6DFB\u52A0\u4E3B\u673A "${name}"`);
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AddModelModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u6DFB\u52A0\u65B0AI\u6A21\u578B" });
    const nameDiv = contentEl.createDiv();
    nameDiv.createEl("label", { text: "\u6A21\u578B\u540D\u79F0" });
    const nameInput = nameDiv.createEl("input", { type: "text", placeholder: "\u4F8B\u5982\uFF1AGPT-4 Video" });
    nameInput.style.width = "100%";
    nameInput.style.marginBottom = "10px";
    const valueDiv = contentEl.createDiv();
    valueDiv.createEl("label", { text: "\u6A21\u578B\u503C\uFF08API\u53C2\u6570\uFF09" });
    const valueInput = valueDiv.createEl("input", { type: "text", placeholder: "\u4F8B\u5982\uFF1Agpt-4-video" });
    valueInput.style.width = "100%";
    valueInput.style.marginBottom = "10px";
    const descDiv = contentEl.createDiv();
    descDiv.createEl("label", { text: "\u63CF\u8FF0\uFF08\u53EF\u9009\uFF09" });
    const descInput = descDiv.createEl("input", { type: "text", placeholder: "\u4F8B\u5982\uFF1AOpenAI\u6700\u65B0\u89C6\u9891\u751F\u6210\u6A21\u578B" });
    descInput.style.width = "100%";
    descInput.style.marginBottom = "20px";
    const buttonDiv = contentEl.createDiv();
    buttonDiv.style.display = "flex";
    buttonDiv.style.gap = "10px";
    buttonDiv.style.justifyContent = "flex-end";
    const cancelButton = buttonDiv.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.onclick = () => this.close();
    const addButton = buttonDiv.createEl("button", { text: "\u6DFB\u52A0" });
    addButton.style.backgroundColor = "var(--interactive-accent)";
    addButton.style.color = "var(--text-on-accent)";
    addButton.onclick = () => {
      const name = nameInput.value.trim();
      const value = valueInput.value.trim();
      const description = descInput.value.trim();
      if (!name || !value) {
        new import_obsidian.Notice("\u8BF7\u586B\u5199\u6A21\u578B\u540D\u79F0\u548C\u503C");
        return;
      }
      if (this.plugin.settings.modelConfigs.some((model) => model.value === value)) {
        new import_obsidian.Notice("\u8BE5\u6A21\u578B\u503C\u5DF2\u5B58\u5728");
        return;
      }
      const newModel = {
        id: `custom_${Date.now()}`,
        name,
        value,
        enabled: true,
        description: description || void 0,
        isCustom: true
      };
      this.onSubmit(newModel);
      this.close();
      new import_obsidian.Notice(`\u5DF2\u6DFB\u52A0\u6A21\u578B "${name}"`);
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var EditModelModal = class extends import_obsidian.Modal {
  constructor(app, plugin, model, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.model = model;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u7F16\u8F91AI\u6A21\u578B" });
    const nameDiv = contentEl.createDiv();
    nameDiv.createEl("label", { text: "\u6A21\u578B\u540D\u79F0" });
    const nameInput = nameDiv.createEl("input", { type: "text", value: this.model.name });
    nameInput.style.width = "100%";
    nameInput.style.marginBottom = "10px";
    const valueDiv = contentEl.createDiv();
    valueDiv.createEl("label", { text: "\u6A21\u578B\u503C\uFF08API\u53C2\u6570\uFF09" });
    const valueInput = valueDiv.createEl("input", { type: "text", value: this.model.value });
    valueInput.style.width = "100%";
    valueInput.style.marginBottom = "10px";
    const descDiv = contentEl.createDiv();
    descDiv.createEl("label", { text: "\u63CF\u8FF0\uFF08\u53EF\u9009\uFF09" });
    const descInput = descDiv.createEl("input", { type: "text", value: this.model.description || "" });
    descInput.style.width = "100%";
    descInput.style.marginBottom = "20px";
    const buttonDiv = contentEl.createDiv();
    buttonDiv.style.display = "flex";
    buttonDiv.style.gap = "10px";
    buttonDiv.style.justifyContent = "flex-end";
    const cancelButton = buttonDiv.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.onclick = () => this.close();
    const saveButton = buttonDiv.createEl("button", { text: "\u4FDD\u5B58" });
    saveButton.style.backgroundColor = "var(--interactive-accent)";
    saveButton.style.color = "var(--text-on-accent)";
    saveButton.onclick = () => {
      const name = nameInput.value.trim();
      const value = valueInput.value.trim();
      const description = descInput.value.trim();
      if (!name || !value) {
        new import_obsidian.Notice("\u8BF7\u586B\u5199\u6A21\u578B\u540D\u79F0\u548C\u503C");
        return;
      }
      if (this.plugin.settings.modelConfigs.some((model) => model.value === value && model.id !== this.model.id)) {
        new import_obsidian.Notice("\u8BE5\u6A21\u578B\u503C\u5DF2\u5B58\u5728");
        return;
      }
      const updatedModel = {
        ...this.model,
        name,
        value,
        description: description || void 0
      };
      this.onSubmit(updatedModel);
      this.close();
      new import_obsidian.Notice(`\u5DF2\u66F4\u65B0\u6A21\u578B "${name}"`);
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
